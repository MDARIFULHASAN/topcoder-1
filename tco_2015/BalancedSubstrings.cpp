// BEGIN CUT HERE
/*
TCO 2015 Round 2D Easy (250)

問題
-長さNのてこがあり、0か1からなる文字列sとして与えられる
-1の場所にはおもりがあるものとする
-文字列sの部分文字列のうち、左右の重さがつりあうものの総数を求める

*/
// END CUT HERE
#include <algorithm>
#include <string>
#include <vector>
#include <iostream>
#include <sstream>
#include <cstring>
#include <map>

using namespace std;

typedef map<int, int> IntMap;

class BalancedSubstrings {
public:
	int countSubstrings(string s) {
		int ans = 0;
		int N = (int)s.length();
		for (int center = 0; center < N; ++center) {
			IntMap r;
			int w = 0, cnt = 1;
			for (int i = center + 1; i < N; ++i) {
				if (s[i] == '1') {
					r[w] = cnt;
					w += (i - center);
					cnt = 1;
				} else {
					++cnt;
				}
			}
			r[w] = cnt;
			w = 0, cnt = 1;
			for (int i = center - 1; i >= 0; --i) {
				if (s[i] == '1') {
					if (s[center] == '1' || w > 0) {
						ans += r[w] * cnt;
					}
					w += (center - i);
					cnt = 1;
				} else {
					++cnt;
				}
			}
			if (s[center] == '1' || w > 0) {
				ans += r[w] * cnt;
			}
		}
		for (int i = 0; i < N; ++i) {
			int j;
			if (s[i] == '0') {
				for (j = i + 1; j < N; ++j) {
					if (s[j] != '0') {
						break;
					}
				}
				int len = j - i;
				ans += (len + 1) * len / 2;
				i = j - 1;
			}
		}
		return ans;
	}

// BEGIN CUT HERE
private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }

	void verify_case(int Case, const int &Expected, const int &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }

public:
	void run_test(int Case) { 
		int n = 0;

		// test_case_0
		if ((Case == -1) || (Case == n)){
			string Arg0 = "011";
			int Arg1 = 4;

			verify_case(n, Arg1, countSubstrings(Arg0));
		}
		n++;

		// test_case_1
		if ((Case == -1) || (Case == n)){
			string Arg0 = "10111";
			int Arg1 = 10;

			verify_case(n, Arg1, countSubstrings(Arg0));
		}
		n++;

		// test_case_2
		if ((Case == -1) || (Case == n)){
			string Arg0 = "00000";
			int Arg1 = 15;

			verify_case(n, Arg1, countSubstrings(Arg0));
		}
		n++;

		// test_case_3
		if ((Case == -1) || (Case == n)){
			string Arg0 = "0000001000000";
			int Arg1 = 91;

			verify_case(n, Arg1, countSubstrings(Arg0));
		}
		n++;

		// test_case_4
		if ((Case == -1) || (Case == n)){
			string Arg0 = "100110001001";
			int Arg1 = 49;

			verify_case(n, Arg1, countSubstrings(Arg0));
		}
		n++;


		if ((Case == -1) || (Case == n)){
			string Arg
			int Arg1 = 3126250;
			verify_case(n, Arg1, countSubstrings(Arg0));
		}
		n++;

		if ((Case == -1) || (Case == n)){
			string Arg
			int Arg1 = 3121254;
			verify_case(n, Arg1, countSubstrings(Arg0));
		}
		n++;


		if ((Case == -1) || (Case == n)){
			string Arg0 = "10000";
			int Arg1 = 15;

			verify_case(n, Arg1, countSubstrings(Arg0));
		}
		n++;

		if ((Case == -1) || (Case == n)){
			string Arg0 = "00001";
			int Arg1 = 15;

			verify_case(n, Arg1, countSubstrings(Arg0));
		}
		n++;

		if ((Case == -1) || (Case == n)){
			string Arg0 = "00100";
			int Arg1 = 15;

			verify_case(n, Arg1, countSubstrings(Arg0));
		}
		n++;

		if ((Case == -1) || (Case == n)){
			string Arg0 = "10101";
			int Arg1 = 15;

			verify_case(n, Arg1, countSubstrings(Arg0));
		}
		n++;


	}

// END CUT HERE

};

// BEGIN CUT HERE
int main() {
	BalancedSubstrings ___test;
	___test.run_test(-1);
}
// END CUT HERE
