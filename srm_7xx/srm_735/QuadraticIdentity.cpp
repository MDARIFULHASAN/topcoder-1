// BEGIN CUT HERE
/*
SRM 735 Div1 Medium (500)

問題
-(25^2 mod 100) = (625 mod 100) = 25である。
-すなわち、100を法としたとき25は二乗の固定点である。
-mを法とする二乗の固定点を全て求めよ。
-ただし答えの総数が500個を超えるときは、500個以下になるまで、奇数のインデックスの値を繰り返し捨てること。

*/
// END CUT HERE
#include <algorithm>
#include <string>
#include <vector>
#include <iostream>
#include <sstream>
#include <cstring>

using namespace std;

typedef long long LL;

LL extgcd(LL a, LL b, LL &x, LL &y) {
	LL d = a;
	if (b != 0) {
		d = extgcd(b, a % b, y, x);
		y -= (a / b) * x;
	} else {
		x = 1, y = 0;
	}
	return d;
}

LL modinv(LL a, LL m) {
	LL x, y;
	extgcd(a, m, x, y);
	return (m + x) % m;
}

class QuadraticIdentity {
public:
	vector<long long> getFixedPoints(long long m) {
		if (m == 1) {
			return{ 0 };
		}
		vector<long long> ans;
		vector<LL> f;
		LL q = sqrt(m), r = m;
		for (LL i = 2; i <= q; i += 1) {
			if ((r % i) == 0) {
				LL y = 1;
				while ((r % i) == 0) {
					r /= i;
					y *= i;
				}
				f.push_back(y);
			}
		}
		if (r > 1) {
			f.push_back(r);
		}
		LL bm = 1LL << f.size();
		for (LL i = 0; i < bm; ++i) {
			LL a = 1, b = 1;
			for (LL j = 0; j < f.size(); ++j) {
				if ((1LL << j) & i) {
					a *= f[j];
				} else {
					b *= f[j];
				}
			}
			ans.push_back(a * modinv(a % b, b));
		}
		sort(ans.begin(), ans.end());
		while (ans.size() > 500) {
			vector<LL> r;
			for (LL i = 0; i < ans.size(); i += 2) {
				r.push_back(ans[i]);
			}
			ans = r;
		}
		return ans;
	}

// BEGIN CUT HERE
private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }

	void verify_case(int Case, const vector<long long> &Expected, const vector<long long> &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: " << print_array(Expected) << endl; cerr << "\tReceived: " << print_array(Received) << endl; } }

public:
	void run_test(int Case) { 
		int n = 0;

		// test_case_0
		if ((Case == -1) || (Case == n)){
			long long Arg0 = 20LL;
			long Arr1[] = {0, 1, 5, 16 };

			vector<long long> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0])));
			verify_case(n, Arg1, getFixedPoints(Arg0));
		}
		n++;

		// test_case_1
		if ((Case == -1) || (Case == n)){
			long long Arg0 = 4262046602LL;
			LL Arr1[] = {0LL, 1LL, 27391046LL, 152613648LL, 180004693LL, 333799345LL, 361190390LL, 513804038LL, 541195083LL, 621181264LL, 648572309LL, 801185957LL, 828577002LL, 941255910LL, 968646955LL, 982371654LL, 1009762699LL, 1121260603LL, 1148651648LL, 1162376347LL, 1189767392LL, 1302446300LL, 1329837345LL, 1482450993LL, 1509842038LL, 1589828219LL, 1617219264LL, 1769832912LL, 1797223957LL, 1951018609LL, 1978409654LL, 2103632256LL, 2131023301LL, 2131023302LL, 2158414347LL, 2283636949LL, 2311027994LL, 2464822646LL, 2492213691LL, 2644827339LL, 2672218384LL, 2752204565LL, 2779595610LL, 2932209258LL, 2959600303LL, 3072279211LL, 3099670256LL, 3113394955LL, 3140786000LL, 3252283904LL, 3279674949LL, 3293399648LL, 3320790693LL, 3433469601LL, 3460860646LL, 3613474294LL, 3640865339LL, 3720851520LL, 3748242565LL, 3900856213LL, 3928247258LL, 4082041910LL, 4109432955LL, 4234655557LL };

			vector<long long> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0])));
			verify_case(n, Arg1, getFixedPoints(Arg0));
		}
		n++;

		// test_case_2
		if ((Case == -1) || (Case == n)){
			long long Arg0 = 7LL;
			long Arr1[] = {0, 1 };

			vector<long long> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0])));
			verify_case(n, Arg1, getFixedPoints(Arg0));
		}
		n++;


		if ((Case == -1) || (Case == n)) {
			LL Arg0 = 304250263527210LL;
			LL Arr1[] = { 0, 782262849291, 1827176006656, 3935456304781, 5535931629306, 6352288815796, 7153987312836, 7885834795476, 8755441855161, 10723099809136, 12645090428971, 13501113059721, 14255082277150, 15113506738330, 16007843840626, 17350176111346, 19639349360631, 20664616896210, 21617261812510, 22363222636756, 23383368766681, 25012252654390, 26581483894680, 27754768300260, 28647771200686, 29560540698690, 30325503300730, 31740145459660, 33721886778580, 34994728636791, 35850252331531, 36565294078951, 37531783321956, 38530689730456, 40792307322130, 42174712050835, 43129793198206, 43920477407521, 44680108629871, 45838050620076, 47613522458580, 49265228480755, 50124052129866, 50882953539055, 51770590659151, 52673349121471, 54938706300556, 56355379884805, 57374191812861, 58020595184475, 58748777362276, 59922989868456, 61904656904805, 63679510226410, 64441711589970, 65291714691126, 66098744567856, 67043331266626, 68603213046291, 70613362928395, 71672675566570, 72434876930130, 73386459835690, 74324630119740, 76023235860286, 77764449474790, 78691512311776, 79673410230051, 80444886873715, 81509007596731, 83398760786341, 85027644674050, 86003730241716, 86827565853666, 87654937327881, 88443219706765, 90157897675846, 92139564712195, 93358250747476, 94069992540525, 94737355521810, 95756406488106, 97136084378971, 99404623025995, 100320446767255, 101210395424425, 101972596787985, 102812743666711, 104475557135950, 106260556129651, 107393628549285, 108189475827511, 108951677191071, 109903260096631, 111138186671226, 113469056790090, 114579764012715, 115506826849701, 116203151075935, 117103878112936, 118341166738081, 120350817684175, 121767845662750, 122561291110545, 123462018147546, 124368936426736, 125494823425686, 127084372494366, 128707948771480, 129745668587536, 130505468120665, 131455183487706, 132459257389096, 134724614568181, 136045559566840, 137008863786796, 137833997317380, 138609339111321, 139453516320756, 141339454771515, 143319769053825, 144222527516145, 144954338715550, 145721259149466, 146573857718926, 148174753272910, 150270865547166, 151329284485380, 152125131763605, 152907394612896, 153952307770261, 156060588068386, 157661063392911, 158477420579401, 159279119076441, 160010966559081, 160880573618766, 162848231572741, 164770222192576, 165626244823326, 166380214040755, 167238638501935, 168132975604231, 169475307874951, 171764481124236, 172789748659815, 173742393576115, 174488354400361, 175508500530286, 177137384417995, 178706615658285, 179879900063865, 180772902964291, 181685672462295, 182450635064335, 183865277223265, 185847018542185, 187119860400396, 187975384095136, 188690425842556, 189656915085561, 190655821494061, 192917439085735, 194299843814440, 195254924961811, 196045609171126, 196805240393476, 197963182383681, 199738654222185, 201390360244360, 202249183893471, 203008085302660, 203895722422756, 204798480885076, 207063838064161, 208480511648410, 209499323576466, 210145726948080, 210873909125881, 212048121632061, 214029788668410, 215804641990015, 216566843353575, 217416846454731, 218223876331461, 219168463030231, 220728344809896, 222738494692000, 223797807330175, 224560008693735, 225511591599295, 226449761883345, 228148367623891, 229889581238395, 230816644075381, 231798541993656, 232570018637320, 233634139360336, 235523892549946, 237152776437655, 238128862005321, 238952697617271, 239780069091486, 240568351470370, 242283029439451, 244264696475800, 245483382511081, 246195124304130, 246862487285415, 247881538251711, 249261216142576, 251529754789600, 252445578530860, 253335527188030, 254097728551590, 254937875430316, 256600688899555, 258385687893256, 259518760312890, 260314607591116, 261076808954676, 262028391860236, 263263318434831, 265594188553695, 266704895776320, 267631958613306, 268328282839540, 269229009876541, 270466298501686, 272475949447780, 273892977426355, 274686422874150, 275587149911151, 276494068190341, 277619955189291, 279209504257971, 280833080535085, 281870800351141, 282630599884270, 283580315251311, 284584389152701, 286849746331786, 288170691330445, 289133995550401, 289959129080985, 290734470874926, 291578648084361, 293464586535120, 295444900817430, 296347659279750, 297079470479155, 297846390913071, 298698989482531, 300299885036515, 302395997310771, 303454416248985 };

			vector<long long> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0])));
			verify_case(n, Arg1, getFixedPoints(Arg0));
		}
		n++;


	}

// END CUT HERE

};

// BEGIN CUT HERE
int main() {
	QuadraticIdentity ___test;
	___test.run_test(-1);
}
// END CUT HERE
